require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, :type => :controller do
  include_context "shared loggedin"

  describe "GET #current" do
    it 'renders the current template' do
      get :current
      expect(response).to render_template(:current)
    end

    it 'assigns @user' do
      get :current
      expect(assigns(:user)).to eq(controller.current_user)
    end
  end

  describe "GET #edit" do
    it 'renders the edit template' do
      get :edit, id: controller.root_user.id
      expect(response).to render_template(:edit)
    end

    it 'assigns @user' do
      get :edit, id: controller.root_user.id
      expect(assigns(:user)).to eq(controller.current_user)
    end
  end

  describe "PUT #update" do

    let(:params) { {id: controller.current_user.id, user: {people_attributes: [{id: controller.current_user.profile.id, first_name: "TEST"}]}} }
    let(:invalid_params) { {id: controller.current_user.id, user: {people_attributes: [{id: controller.current_user.profile.id, first_name: ""}]}} }

    context "with valid params" do
      it 'saves the user' do
        patch :update, params
        expect(assigns(:user).profile.first_name).to eq("TEST")
      end

      it "redirect to show url" do
        patch :update, params
        expect(response).to redirect_to(current_users_url)
      end
    end

    context "with invalid params" do
      it 'not save the user' do
        patch :update, invalid_params
        expect(assigns(:user).errors).not_to be_empty
      end

      it "renders edit template" do
        patch :update, invalid_params
        expect(response).to render_template(:edit)
      end
    end
  end

end
